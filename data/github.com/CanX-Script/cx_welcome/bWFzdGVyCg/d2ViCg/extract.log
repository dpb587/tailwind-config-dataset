==== RUN-DOCKER
+++ dirname -- ./worker/run.sh
++ cd -- ./worker
++ pwd
+ twcrdir=/twcr/worker/..
+ repo=github.com/CanX-Script/cx_welcome
+ reporef=master
+ repopath=./web
++ echo github.com/CanX-Script/cx_welcome
++ sha256sum
++ awk '{ print $1 }'
++ cut -c1-12
+ procdir=/tmp/twcr-4a1e9c809080
++ echo 'github.com/CanX-Script/cx_welcome;master;./web'
++ sha256sum
++ awk '{ print $1 }'
++ cut -c1-12
+ datadir=/twcr/worker/../mnt/dataset/data/6e6e13f4f657
+ '[' '!' -z /twcr/mnt/results ']'
+ datadir=/twcr/mnt/results
+ touch /twcr/mnt/results/extract-failed
++ base64
++ tr -d =
++ tr /+ _-
++ base64
++ tr -d =
++ tr /+ _-
+ writetaskstat analysis_key github.com/CanX-Script/cx_welcome/bWFzdGVyCg/Li93ZWIK
+ jq -nc --arg key analysis_key --arg value github.com/CanX-Script/cx_welcome/bWFzdGVyCg/Li93ZWIK '{ key: $key, value: $value }'
++ date -u +%Y%m%d%H%M%S
++ sha256sum
++ awk '{ print $1 }'
++ cut -c1-16
++ head -c 32 /dev/urandom
+ writetaskstat analysis_nonce 9dcc7fdcdd40d408
+ jq -nc --arg key analysis_nonce --arg value 9dcc7fdcdd40d408 '{ key: $key, value: $value }'
+ writetaskstat input_repo_name github.com/CanX-Script/cx_welcome
+ jq -nc --arg key input_repo_name --arg value github.com/CanX-Script/cx_welcome '{ key: $key, value: $value }'
+ writetaskstat input_repo_ref master
+ jq -nc --arg key input_repo_ref --arg value master '{ key: $key, value: $value }'
+ writetaskstat input_repo_path ./web
+ jq -nc --arg key input_repo_path --arg value ./web '{ key: $key, value: $value }'
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ writetaskstat timestamp_begin 2024-03-03T00:23:41Z
+ jq -nc --arg key timestamp_begin --arg value 2024-03-03T00:23:41Z '{ key: $key, value: $value }'
+ mkdir -p /tmp/twcr-4a1e9c809080
+ pushd /tmp/twcr-4a1e9c809080
+ '[' -d .git ']'
+ git clone --depth=1 -b master https://github.com/CanX-Script/cx_welcome.git .
/tmp/twcr-4a1e9c809080 /twcr
Cloning into '.'...
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ writetaskstat timestamp_git_clone_complete 2024-03-03T00:23:42Z
+ jq -nc --arg key timestamp_git_clone_complete --arg value 2024-03-03T00:23:42Z '{ key: $key, value: $value }'
++ git rev-parse HEAD
+ writetaskstat exec_repo_commit_sha a9f0e2b08a1b9ba93d1e7b8893d9dc05aa20ac58
+ jq -nc --arg key exec_repo_commit_sha --arg value a9f0e2b08a1b9ba93d1e7b8893d9dc05aa20ac58 '{ key: $key, value: $value }'
+++ git show --no-patch --format=%ci
++ date -u --date '2023-11-05 13:01:29 +0100' +%Y-%m-%dT%H:%M:%SZ
+ writetaskstat exec_repo_commit_date 2023-11-05T12:01:29Z
+ jq -nc --arg key exec_repo_commit_date --arg value 2023-11-05T12:01:29Z '{ key: $key, value: $value }'
/tmp/twcr-4a1e9c809080/web /tmp/twcr-4a1e9c809080 /twcr
+ '[' -z ./web ']'
+ pushd ./web
+ tailwind_config_file_name=
+ '[' -f tailwind.config.js ']'
+ tailwind_config_file_name=tailwind.config.js
+ writetaskstat exec_tailwind_config_file tailwind.config.js
+ jq -nc --arg key exec_tailwind_config_file --arg value tailwind.config.js '{ key: $key, value: $value }'
+ cp tailwind.config.js /twcr/mnt/results/extract-raw-tailwind-config.js
+ '[' '!' -f package.json ']'
+ cp package.json /twcr/mnt/results/extract-raw-package.json
+ package_manager_name=npm
+ grep -q '"packageManager":[^"]+"pnpm@"' package.json
+ '[' -f pnpm-lock.yaml ']'
+ package_manager_name=pnpm
+ writetaskstat exec_node_package_manager pnpm
+ jq -nc --arg key exec_node_package_manager --arg value pnpm '{ key: $key, value: $value }'
+ attempt_mode=squash
+ true
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ writetaskstat timestamp_attempt_squash_begin 2024-03-03T00:23:42Z
+ jq -nc --arg key timestamp_attempt_squash_begin --arg value 2024-03-03T00:23:42Z '{ key: $key, value: $value }'
+ [[ squash == \s\q\u\a\s\h ]]
+ set +e
+ node /twcr/worker/../worker/squash-package.mjs tailwind.config.js
+ exitcode=0
+ set -e
+ [[ 0 != \0 ]]
+ cat package.json
+ sed 's/^/>>> /'
>>> {
>>>   "name": "web",
>>>   "homepage": "web/build",
>>>   "private": true,
>>>   "version": "0.1.0",
>>>   "dependencies": {},
>>>   "devDependencies": {
>>>     "tailwindcss": "^3.3.3"
>>>   }
>>> }+ set +e
+ /twcr/worker/../worker/pm-install.sh pnpm /tmp/twcr-4a1e9c809080 /twcr/mnt/results
+ package_manager_name=pnpm
+ procdir=/tmp/twcr-4a1e9c809080
+ datadir=/twcr/mnt/results
+ case "${package_manager_name}" in
+ '[' '!' -f /tmp/twcr-4a1e9c809080/package.json ']'
+ '[' '!' -f package.json ']'
++ pnpm -v
+ sed -Ei 's/("pnpm": ")(.+)(")/\18.15.4\3/' package.json
+ pnpm install
Progress: resolved 0, reused 0, downloaded 1, added 0
Progress: resolved 44, reused 0, downloaded 43, added 0
Packages: +81
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Progress: resolved 82, reused 0, downloaded 81, added 81, done

devDependencies:
+ tailwindcss 3.3.3

Done in 2.7s
+ pnpm ls --json
+ jq -cr '
        .[]
        | [.dependencies, .devDependencies, .optionalDependencies]
        | map(select(.))[]
        | to_entries
        | map({ name: .key, version: .value.version })
        | sort_by(.name)[]
      '
+ exitcode=0
+ set -e
+ [[ 0 != \0 ]]
++ jq -sr 'map(select(.name == "tailwindcss")) | first | .version'
+ tailwind_package_version=3.3.3
+ tailwind_config_exporter=tailwind.config.exporter3.mjs
+ true
+ cp /twcr/worker/../worker/tailwind.config.exporter3.mjs ./
+ set +e
+ node ./tailwind.config.exporter3.mjs tailwind.config.js
+ exitcode=0
+ set -e
+ [[ 0 != \0 ]]
+ break
+ echo 'module.exports={plugins:['
+ jq -rs '
        map(select(.name | startswith("@tailwindcss/")))
        | map("require(" + ( .name | tojson ) + "),")[]
      '
+ echo ']}'
+ cat tailwind.config.js
+ sed 's/^/>>> /'
>>> module.exports={plugins:[
>>> ]}
+ node ./tailwind.config.exporter3.mjs tailwind.config.js
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ writetaskstat timestamp_attempt_squash_end 2024-03-03T00:23:46Z
+ jq -nc --arg key timestamp_attempt_squash_end --arg value 2024-03-03T00:23:46Z '{ key: $key, value: $value }'
+ break
++ date -u +%Y-%m-%dT%H:%M:%SZ
+ writetaskstat timestamp_end 2024-03-03T00:23:46Z
+ jq -nc --arg key timestamp_end --arg value 2024-03-03T00:23:46Z '{ key: $key, value: $value }'
+ rm /twcr/mnt/results/extract-failed
+ touch /twcr/mnt/results/extract-completed
